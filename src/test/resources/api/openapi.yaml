forEach: Relation
fileName: {{target.aggregate.nameCamelCase}}-open-api.yaml
except: {{contexts.except}}
ifDuplicated: merge
---
openapi: 3.0.2
info:
  title: {{target.aggregate.namePascalCase}}
  version: 0.0.1
  description: API definition of {{target.aggregate.nameCamelCase}}
  contact:
    name: creator's name
    url: http://creator.homepage.address
    email: creator@creator.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
{{#target.aggregate}}
  _key: '/{{namePlural}}'
  /{{namePlural}}:
    summary: Global operations on {{namePlural}}
    get:
      tags:
      - {{namePlural}}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/{{namePascalCase}}'
              examples:
                {{namePlural}}_json:
                  value:
                  -
                  {{#aggregateRoot.fieldDescriptors}}
                    {{name}}: {{map @root.contexts.examples className}}
                  {{/aggregateRoot.fieldDescriptors}}
          description: Get list of {{namePlural}}
      operationId: Get{{namePascalCase}}
      summary: Get list of {{namePlural}}
  /{{namePlural}}/{id}:
    summary: Specific operation on {{namePlural}}
    get:
      parameters:
      - examples:
          {{map @root.contexts.examples aggregateRoot.keyFieldDescriptor.className}}:
            value: {{map @root.contexts.examples aggregateRoot.keyFieldDescriptor.className}}
        name: {{aggregateRoot.keyFieldDescriptor.nameCamelCase}}
        description: {{namePascalCase}} name
        schema:
          type: {{map @root.contexts.mappings aggregateRoot.keyFieldDescriptor.className}}
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{namePascalCase}}'
              examples:
                1:
                  value:
                  {{#aggregateRoot.fieldDescriptors}}
                    {{name}}: {{map @root.contexts.examples className}}
                  {{/aggregateRoot.fieldDescriptors}}
          description: {{namePlural}} with specified id
      operationId: Get{{namePascalCase}}ById
      summary: Get {{namePascalCase}} by id
      description: Get {{namePascalCase}} by id
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{namePascalCase}}'
            examples:
              1:
                value:
                {{#aggregateRoot.fieldDescriptors}}
                  {{name}}: {{map @root.contexts.examples className}}
                {{/aggregateRoot.fieldDescriptors}}
        required: true
      parameters:
      - examples:
          1:
            value: 1
        name: {{aggregateRoot.keyFieldDescriptor.nameCamelCase}}
        description: {{namePascalCase}} name
        schema:
          type: {{map @root.contexts.mappings aggregateRoot.keyFieldDescriptor.className}}
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{namePascalCase}}'
              examples:
                1:
                  value:
                  {{#aggregateRoot.fieldDescriptors}}
                    {{name}}: {{map @root.contexts.examples className}}
                  {{/aggregateRoot.fieldDescriptors}}
          description: Changed {{namePascalCase}}
      operationId: Patch{{namePascalCase}}
      summary: Patch existing {{namePascalCase}}
    parameters:
    - name: id
      description: {{namePascalCase}} id
      schema:
        type: {{map @root.contexts.mappings aggregateRoot.keyFieldDescriptor.className}}
      in: path
      required: true
components:
  schemas:
    {{namePascalCase}}:
      title: Root Type for {{namePascalCase}}
      description: The root of the {{namePascalCase}} type's schema.
      type: object
      properties:
      {{#aggregateRoot.fieldDescriptors}}
        {{name}}:
          description: {{name}} of this {{../namePascalCase}}
          type: {{map @root.contexts.mappings className}}
      {{/aggregateRoot.fieldDescriptors}}
      example:
      {{#aggregateRoot.fieldDescriptors}}
        {{name}}: {{map @root.contexts.examples className}}
      {{/aggregateRoot.fieldDescriptors}}
tags:
- name: {{namePascalCase}}
  description: {{namePascalCase}} resource
{{/target.aggregate}}

<function>
 
    let isGetInvocation = ((this.source._type.endsWith("Command") || this.source._type.endsWith("Policy")) && (this.target._type.endsWith("View") || this.target._type.endsWith("Aggregate")))
    let isPostInvocation = ((this.source._type.endsWith("Event") || this.source._type.endsWith("Policy")) && this.target._type.endsWith("Command"))
    let isExternalInvocation = (this.source.boundedContext.name != this.target.boundedContext.name)

    this.contexts.except = !(isExternalInvocation && isPostInvocation)


    this.contexts.mappings = [
      {
        "if":['Double', 'double', 'BigDecimal', 'float'],
        "then":'number'
      },
      {
        "if":['Integer', 'integer', 'Long', 'long'],
        "then": 'integer'
      },
      {
        "if":['String'],
        "then": 'string'
      },
      {
        "default": 'string'
      }
    ]

    this.contexts.examples = [
      {
        "if":['Double', 'double', 'BigDecimal', 'float'],
        "then":1.1
      },
      {
        "if":['Integer', 'integer', 'Long', 'long'],
        "then": 1
      },
      {
        "if":['String'],
        "then": 'A string'
      },
      {
        "default": 'value'
      }
    ]

</function>
